name: cron--core-macos-latest

env:
  os: macos-latest
  distro: core
  epoch: 

schedule_on:
  schedule: 

jobs:
  install_env:
    name: "install qiime2-core= (macos-latest)"
    runs-on: macos-latest
    outputs: {'pkgs': '${{ steps.collect_urls.outputs.pkgs }}', 'metapackage_spec': '${{ steps.metapackage.outputs.spec }}'}
    steps: [{'name': 'checkout source', 'uses': 'actions/checkout@v2'}, {'name': 'configure conda and friends', 'run': 'source "$CONDA/etc/profile.d/conda.sh"\nconda activate base\nconda config --set always_yes yes\nconda config --set changeps1 no\nconda config --set quiet true\nsudo conda upgrade -n base -q -y -c defaults --override-channels conda\nsudo conda install -n base -q -y -c defaults --override-channels conda-build yq\nconda info -a\nconda config --show\n'}, {'name': 'identify metapackage', 'id': 'metapackage', 'env': {'DATA_FILE': '${{ env.epoch }}/staged/${{ env.distro }}/data.yaml', 'META_FILE': '${{ env.epoch }}/staged/${{ env.distro }}/meta.yaml.jinja'}, 'run': 'source "$CONDA/etc/profile.d/conda.sh"\nconda activate base\necho "::set-output name=spec::$(head -n 2 $META_FILE | yq -r .package.name)=$(yq -r .version $DATA_FILE)"\n'}, {'name': 'install metapackage', 'env': {'Q2_CHANNEL': 'https://packages.qiime2.org/qiime2/${{ env.epoch }}/staged/${{ env.distro }}'}, 'run': 'source "$CONDA/etc/profile.d/conda.sh"\nsudo conda create -q -n test-env -c $Q2_CHANNEL -c conda-forge -c bioconda -c defaults ${{ steps.metapackage.outputs.spec }}\nsudo conda run -n test-env python -c \'import qiime2\'\n'}, {'name': 'check repo consistency', 'env': {'BUILD_FILE': '${{ env.epoch }}/staged/${{ env.distro }}/conda_build_config.yaml', 'DATA_FILE': '${{ env.epoch }}/staged/${{ env.distro }}/data.yaml'}, 'run': 'source "$CONDA/etc/profile.d/conda.sh"\nconda activate base\nconsistent=$(jq -cs \'[([.[1] as $build | .[0].run[] | {(.): $build[. | split("-") | join("_")][0]}] | add) as $lookup | .[2][] | select(.name | in($lookup)) | .version == $lookup[.name]] | all\' \\\n              <(yq -cj \'.\' $DATA_FILE) \\\n              <(yq -cj \'.\' $BUILD_FILE) \\\n              <(conda list -n test-env --json))\nif [[ $consistent == "false" ]]\nthen\n    echo "conda_build_config.yaml is inconsistent with the metapackage"\n    jq -s \'([.[1] as $build | .[0].run[] | {(.): $build[. | split("-") | join("_")][0]}] | add) as $lookup | .[2][] | select(.name | in($lookup)) | select(.version != $lookup[.name]) | {package: .name, version: .version, conda_build_config: $lookup[.name] }\' \\\n                      <(yq -cj \'.\' $DATA_FILE) \\\n                      <(yq -cj \'.\' $BUILD_FILE) \\\n                      <(conda list -n test-env --json)\n    exit 1\nfi\n'}, {'name': "collect tar.bz2's", 'id': 'collect_urls', 'env': {'DATA_FILE': '${{ env.epoch }}/staged/${{ env.distro }}/data.yaml'}, 'run': 'source "$CONDA/etc/profile.d/conda.sh"\nconda activate base\npkgs=$(jq -cs \'[ .[0].run[] as $packages | .[1][] | select(.name | IN($packages)) | {url: (.base_url + "/" + .platform + "/" + .dist_name + ".tar.bz2"), name: .name} ]\' \\\n        <(yq -cj \'.\' $DATA_FILE) \\\n        <(conda list -n test-env --json))\necho "::set-output name=pkgs::$pkgs"\n'}]
      
  test_package: {'name': 'test ${{ matrix.pkg.name }}', 'needs': 'install_env', 'runs-on': 'macos-latest', 'strategy': {'fail-fast': False, 'matrix': {'pkg': '${{ fromJson(needs.install_env.outputs.pkgs) }}'}}, 'steps': [{'name': 'configure conda and friends', 'run': 'source "$CONDA/etc/profile.d/conda.sh"\nconda activate base\nconda config --set always_yes yes\nconda config --set changeps1 no\nconda config --set quiet true\nsudo conda upgrade -n base -q -y -c defaults --override-channels conda\nsudo conda install -n base -q -y -c defaults --override-channels conda-build\nconda info -a\nconda config --show\n'}, {'name': 'run test', 'env': {'Q2_CHANNEL': 'https://packages.qiime2.org/qiime2/${{ env.epoch }}/staged/${{ env.distro }}'}, 'run': 'source "$CONDA/etc/profile.d/conda.sh"\nconda activate base\nwget ${{ matrix.pkg.url }}\nsudo conda build -q -c $Q2_CHANNEL -c conda-forge -c bioconda -c defaults --extra-deps ${{ needs.install_env.outputs.metapackage_spec }} -t "*.tar.bz2"\n'}]}

  phone_home: {'needs': 'test_package', 'runs-on': 'macos-latest', 'steps': [{'name': 'checkout source', 'uses': 'actions/checkout@v2'}, {'name': 'configure conda and friends', 'run': 'source "$CONDA/etc/profile.d/conda.sh"\nconda activate base\nconda config --set always_yes yes\nconda config --set changeps1 no\nconda config --set quiet true\nsudo conda upgrade -n base -q -y -c defaults --override-channels conda\nsudo conda install -n base -q -y -c defaults --override-channels conda-build yq\nconda info -a\nconda config --show\n'}, {'name': 'phone home', 'env': {'LIBRARY_TOKEN': '${{ secrets.LIBRARY_TOKEN }}', 'DATA_FILE': '${{ env.epoch }}/staged/${{ env.distro }}/data.yaml', 'BUILD_FILE': '${{ env.epoch }}/staged/${{ env.distro }}/conda_build_config.yaml', 'META_FILE': '${{ env.epoch }}/staged/${{ env.distro }}/meta.yaml.jinja'}, 'run': 'source "$CONDA/etc/profile.d/conda.sh"\nconda activate base\nphone_home=$(yq ".meta.phone_home" $DATA_FILE)\nif [ "$phone_home" = "false" ]\nthen\n    echo "skipping library upload due to disabled phone_home"\n    exit 0\nfi\nmetapackage_version=$(yq -r .version $DATA_FILE)\npackage_versions=$(jq -cs \'.[1] as $build | .[0] as $data | .[2] as $meta | [$data.run[] | {(.): $build[. | split("-") | join("_")][0]}] | add + {($meta.name):$data.version}\' \\\n                    <(yq -cj \'.\' $DATA_FILE) \\\n                    <(yq -cj \'.\' $BUILD_FILE) \\\n                    <(head -n 2 $META_FILE | yq -cj \'.package\'))\nresp=$(curl \\\n  --silent \\\n  --include \\\n  --data-urlencode "token=$LIBRARY_TOKEN" \\\n  --data-urlencode "version=$metapackage_version" \\\n  --data-urlencode "package_versions=$package_versions" \\\n  --data "run_id=$GITHUB_RUN_ID" \\\n  --data "distro=${{ env.distro }}" \\\n  --data "epoch=${{ env.epoch }}" \\\n  --data "artifact_name=${{ env.distro }}-osx" \\\n  --header "Content-Type: application/x-www-form-urlencoded" \\\n  --request POST \\\n  https://library.qiime2.org/api/v1/packages/pass/\n)\ncode=$(echo $resp | grep HTTP | awk \'{print $2}\')\nif [[ $code -ne 200 ]]\nthen\n  echo "whoops"\n  echo $resp\n  exit 1\nfi'}]}